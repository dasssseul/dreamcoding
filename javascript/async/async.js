
// [ÎìúÎ¶ºÏΩîÎî© ÏóòÎ¶¨]
// ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏ 13. ÎπÑÎèôÍ∏∞Ïùò ÍΩÉ JavaScriptÏôÄ await, Ïú†Ïö©Ìïú Promise APIs

// async & await
// promise Ï≤¥Ïù¥ÎãùÏùÑ Í≥ÑÏÜçÌïòÎ©¥ ÏΩîÎìúÍ∞Ä ÎÇúÏû°Ìï¥ÏßÄÍ∏∞ ÎïåÎ¨∏Ïóê
// promiseÎ•º Ï¢Ä Îçî Í∞ÑÌé∏ÌïòÍ≥†, Í∞ÑÍ≤∞ÌïòÍ≥†, ÎèôÍ∏∞Ï†ÅÏúºÎ°ú Ïã§ÌñâÎêòÎäî Í≤ÉÏ≤òÎüº Î≥¥Ïù¥Í≤å ÎßåÎì§Ïñ¥Ï§å

// 1. async
// ÏÇ¨Ïö©ÏûêÏùò Îç∞Ïù¥ÌÑ∞Î•º Î∞±ÏóîÎìúÏóêÏÑú Î∞õÏïÑÏò§Îäî Ìï®Ïàò
function fetchUser(){
    return new Promise((resolve, reject)=>{
        // do network request in 10 secs...
        resolve('ellie');
    });
};

// async ÏÇ¨Ïö© Ïãú promise Ïì∞ÏßÄ ÏïäÏïÑÎèÑ ÏûêÎèôÏ†ÅÏúºÎ°ú promiseÎ°ú Î≥ÄÌôòÎê®
async function fetchUser2(){
    // do network request in 10 secs...
    return 'ellie';
};

// Ìò∏Ï∂ú
const user = fetchUser();
const user2 = fetchUser2();
user.then(console.log);
user2.then(console.log);

// 2. await
// asyncÍ∞Ä Î∂ôÏùÄ Ìï®Ïàò ÏïàÏóêÏÑúÎßå await ÏÇ¨Ïö© Í∞ÄÎä•
function delay(ms){
    // Ï†ïÌï¥ÏßÑ msÍ∞Ä ÏßÄÎÇòÎ©¥ resolveÎ•º Ìò∏Ï∂úÌïòÎäî Promise Î¶¨ÌÑ¥
    return new Promise(resolve => setTimeout(resolve, ms));
};

async function getApple(){
    // await : delayÍ∞Ä ÎÅùÎÇ† ÎïåÍπåÏßÄ Í∏∞Îã§Î†∏Îã§Í∞Ä ÏÇ¨Í≥º Î¶¨ÌÑ¥
    await delay(1000);
    return 'üçé';
};

async function getBanana(){
    // delayÍ∞Ä ÎÅùÎÇ† ÎïåÍπåÏßÄ Í∏∞Îã§Î†∏Îã§Í∞Ä Î∞îÎÇòÎÇò Î¶¨ÌÑ¥
    await delay(2000);
    return 'üçå';
};

// Ï≤¥Ïù¥ÎãùÏùò Í≤ΩÏö∞ 
function getBanana2(){
    return delay(1000)
    .then(()=>'üçå');
};

async function pickFruits(){
    // ÏÇ¨Í≥ºÏôÄ Î∞îÎÇòÎÇò ÏàòÌñâÏùÑ Î≥ëÎ†¨Ï†ÅÏúºÎ°ú ÌïòÍ≥† Ïã∂Îã§Î©¥
    const applePromise = getApple();
    const bananaPromise = getBanana();
    const apple = await applePromise;
    const banana = await bananaPromise;
    // 1Ï¥àÎßåÏóê Î¶¨ÌÑ¥ Í∞í Ï∂úÎ†•
    return `${apple} + ${banana}`
}

pickFruits().then(console.log);

// 3. useful Promise APIs
// ÏúÑÏùò ÏΩîÎìúÎ•º Í∞ÑÎã®ÌïòÍ≤å ÎßåÎì§Í∏∞_Promise.all
function pickAllFruits(){
    return Promise.all([getApple(), getBanana()])
    .then(fruits => fruits.join(' + '));
}

pickAllFruits().then(console.log)

// Ïñ¥Îñ§ Í≤ÉÏù¥Îì† ÏÉÅÍ¥ÄÏóÜÏù¥ Îπ®Î¶¨ Í∞ÄÏ†∏ÏôÄÏßÄÎäî Ï≤´Î≤àÏß∏ Í≥ºÏùºÏùÑ Î∞òÌôò
// Promise.race
function pickOnlyOne(){
    return Promise.race([getApple(), getBanana()]);
}

pickOnlyOne().then(console.log);


// Callback Hell example to promise
class UserStorage {
    loginUser(id, password){
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                if (
                    (id === 'ellie' && password === 'dream') ||
                    (id === 'coder' && password === 'academy')
                ){
                    resolve(id);
                }else{
                    reject(new Error('not found'));
                }
            }, 2000);
            
        });
    }

    getRoles(user){
        return new Promise((resolve, reject)=>{
            setTimeout(() => {
                if (user === 'ellie'){
                    resolve({name: 'ellie', role: 'admin'});
                }else{
                    reject(new Error('no access'));
                }
            }, 1000);

        });
    }
}

const userStorage = new UserStorage();
// ÏÇ¨Ïö©ÏûêÏóêÍ≤å Îç∞Ïù¥ÌÑ∞ Î∞õÏïÑÏò§Í∏∞
const id = prompt('enter your id');
const password = prompt('enter your password');

// Î°úÍ∑∏Ïù∏ÌïòÍ∏∞
// userStorage.loginUser(id, password)
//     .then(userStorage.getRoles)
//     .then(user => alert(`Hello ${user.name}, you have a ${user.role} role`))
//     .catch(console.log);

// Î°úÍ∑∏Ïù∏ÌïòÍ∏∞ to async
async function practiceAsync(){
    const login = await userStorage.loginUser(id, password);
    const roles = await userStorage.getRoles(login);
    return `Hello ${roles.name}, you have a ${roles.role} role`;
};

practiceAsync().then(alert);

